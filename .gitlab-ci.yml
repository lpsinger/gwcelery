include:
  - project: computing/gitlab-ci-templates
    file: python.yml
  - project: computing/gitlab-ci-templates
    file: workflow/sccb.yml

variables:
  # Allow Celery to run as root, because everything runs as root under Docker.
  C_FORCE_ROOT: 'true'
  # Checking out the source is the exception rather than the rule because
  # most of our CI jobs run from tarballs or wheels or don't require the source
  # at all.
  GIT_STRATEGY: none

.in-tmpdir: &in-tmpdir
  before_script:
    - WORKING_DIRECTORY="$(mktemp -d)"
    - cd "${WORKING_DIRECTORY}"
  after_script:
    - cd "${CI_PROJECT_DIR}"
    - rm -rf "${WORKING_DIRECTORY}"

stages:
  - dist
  - test
  - deploy

# Build source distribution
sdist:
  image: python:slim
  stage: dist
  variables:
    GIT_STRATEGY: fetch
  before_script:
    # poetry-dynamic-versioning will need access to the git tool.
    - apt-get -q update
    - apt-get -yq install --no-install-recommends git
  script:
    - python -m pip install --upgrade pip poetry poetry-dynamic-versioning
    - poetry build -f sdist
    - mv dist/* .
  artifacts:
    paths:
      - '*.tar.gz'

# Build binary distribution
bdist:
  image: python:slim
  stage: dist
  <<: *in-tmpdir
  script:
    - python -m pip install --upgrade pip poetry poetry-dynamic-versioning
    - tar --strip-components 1 -xf ${CI_PROJECT_DIR}/*.tar.*
    - poetry build -f wheel
    - mv dist/* ${CI_PROJECT_DIR}
  needs:
    - sdist
  artifacts:
    paths:
      - '*.whl'

# Generate requirements file
requirements:
  image: python:slim
  stage: dist
  variables:
    GIT_STRATEGY: fetch
  before_script:
    # poetry-dynamic-versioning will need access to the git tool.
    - apt-get -q update
    - apt-get -yq install --no-install-recommends git
  script:
    - python -m pip install --upgrade pip poetry poetry-dynamic-versioning
    - poetry export -f requirements.txt --without-hashes -o requirements.txt
    - poetry export -f requirements.txt --dev --without-hashes -o requirements-dev.txt
  artifacts:
    paths:
      - 'requirements.txt'
      - 'requirements-dev.txt'

# Build Docker container for dependencies
.dependencies: &dependencies
  stage: dist
  variables:
    GIT_STRATEGY: fetch
    IMAGE_TAG: $CI_REGISTRY_IMAGE/$CI_JOB_NAME:$CI_COMMIT_REF_SLUG
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - |
      cat <<EOF > Dockerfile
      FROM python:${CI_JOB_NAME#*python}
      COPY requirements.txt .
      RUN pip --no-cache-dir install -r requirements.txt
      RUN rm -f requirements.txt
      EOF
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
    - if [ "${CI_COMMIT_TAG:0:1}" = "v" ]; then docker tag $IMAGE_TAG ${IMAGE_TAG%:*}:latest; docker push ${IMAGE_TAG%:*}:latest; fi
  needs:
    - requirements
  only:
    changes:
      - pyproject.toml
dependencies/python3.7:
  <<: *dependencies
dependencies/python3.8:
  <<: *dependencies

# Run unit tests and coverage measurement
.test: &test
  stage: test
  coverage: '/^TOTAL\s+.*\s+(\d+\.?\d*)%/'
  <<: *in-tmpdir
  script:
    - apt-get update -qq && apt-get install -y -qq redis-server
    - tar --strip-components 1 -xf ${CI_PROJECT_DIR}/*.tar.*
    - pip install -r ${CI_PROJECT_DIR}/requirements-dev.txt
    - pip install pytest-cov
    - pip install .
    - pytest -vv --cov --cov-report=html:${CI_PROJECT_DIR}/htmlcov --cov-report=term --junit-xml=${CI_PROJECT_DIR}/junit.xml
  needs: &test-needs
    - requirements
    - sdist
  artifacts:
    paths:
      - htmlcov/
    reports:
      junit: junit.xml
test/python3.7:
  image: $CI_REGISTRY_IMAGE/dependencies/python3.7:$CI_COMMIT_REF_SLUG
  needs:
    - *test-needs
    - job: dependencies/python3.7
      optional: true
  <<: *test
test/python3.8:
  image: $CI_REGISTRY_IMAGE/dependencies/python3.8:$CI_COMMIT_REF_SLUG
  needs:
    - *test-needs
    - job: dependencies/python3.8
      optional: true
  <<: *test

lint:
  extends:
    - .python:flake8
  image: $CI_REGISTRY_IMAGE/dependencies/python3.8:$CI_COMMIT_REF_SLUG
  stage: test
  variables:
    GIT_STRATEGY: fetch
  needs:
    - sdist

associate commits in Sentry:
  stage: test
  needs:
    - sdist
  variables:
    GIT_STRATEGY: fetch
  only:
    - master@emfollow/gwcelery
    - tags@emfollow/gwcelery
  image:
    name: getsentry/sentry-cli
    entrypoint: [""]
  script:
    - SENTRY_VERSION=$(echo *.tar.* | sed 's/\.tar\..*//')
    - sentry-cli releases new ${SENTRY_VERSION}
    - sentry-cli releases set-commits --auto ${SENTRY_VERSION}

# Build docker container for application itself
.docker: &docker
  stage: deploy
  needs: &docker-needs
    - bdist
  script:
    - IMAGE_TAG=$CI_REGISTRY_IMAGE/${CI_JOB_NAME#*/}:$CI_COMMIT_REF_SLUG
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - |
      cat <<EOF > Dockerfile
      FROM $CI_REGISTRY_IMAGE/dependencies/${CI_JOB_NAME#*/}:$CI_COMMIT_REF_SLUG
      COPY *.whl .
      RUN pip install *.whl
      RUN rm -f *.whl
      USER nobody
      WORKDIR /tmp
      ENTRYPOINT ["gwcelery"]
      EOF
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
    - if [ "${CI_COMMIT_TAG:0:1}" = "v" ]; then docker tag $IMAGE_TAG ${IMAGE_TAG%:*}:latest; docker push ${IMAGE_TAG%:*}:latest; fi
  needs:
    - bdist
docker/python3.7:
  needs:
    - *docker-needs
    - job: dependencies/python3.7
      optional: true
  <<: *docker
docker/python3.8:
  needs:
    - *docker-needs
    - job: dependencies/python3.8
      optional: true
  <<: *docker

# Generate documentation
doc:
  image: python:slim
  stage: test
  <<: *in-tmpdir
  script:
    - apt-get update -qq && apt-get install -y -qq graphviz
    - tar --strip-components 1 -xf ${CI_PROJECT_DIR}/*.tar.*
    - pip install -r docs-requirements.txt
    - sphinx-build -b html doc pages
  dependencies:
    - sdist

# SCCB request
sccb:
  stage: deploy
  before_script:
    # poetry-dynamic-versioning needs to be installed to properly
    # update the version information in pyproject.toml
    - python -m pip install --upgrade pip poetry poetry-dynamic-versioning
  needs:
    - doc
    - lint
    - test/python3.7
    - test/python3.8

# Publish coverage
pages:
  stage: deploy
  script:
    - mv htmlcov public/
  artifacts:
    paths:
      - public
    expire_in: 30 days
  only:
    - master
  needs:
    - test/python3.7

# Upload package to PyPI.
# Place your PyPI API token in the repository's GitLab CI secrets.
pypi:
  stage: deploy
  image: python:slim
  script:
    - pip install twine
    - twine upload --username __token__ --password $PYPI_API_TOKEN *.tar.* *.whl
  needs:
    - sdist
    - bdist
  only:
    - tags@emfollow/gwcelery

# Create a release in GitLab
release:
  stage: deploy
  image: python
  variables:
    GIT_STRATEGY: fetch
  script:
    - python -m pip install --upgrade pip poetry poetry-dynamic-versioning
    - PACKAGE_NAME="$(basename $PWD)"
    - PACKAGE_VERSION="$(poetry version --short)"
    - CHANGES_FILENAME="$(echo CHANGES.*)"
    - |
      tee json <<EOF
      {
        "name": "${PACKAGE_VERSION}",
        "tag_name": "${CI_COMMIT_TAG}",
        "description": "Version ${PACKAGE_VERSION}",
        "assets": {
          "links": [
            {
              "name": "PyPI",
              "url": "https://pypi.org/project/${PACKAGE_NAME}/${PACKAGE_VERSION}/"
            },
            {
              "name": "Change log",
              "url": "${CI_PROJECT_URL}/blob/v${VERSION}/${CHANGES_FILENAME}"
            },
            {
              "name": "Documentation",
              "url": "https://${PACKAGE_NAME}.readthedocs.io/en/v${PACKAGE_VERSION}/"
            }
          ]
        }
      }
      EOF
    - |
      if [ -n "$CI_COMMIT_TAG" ]
      then
        curl --silent --show-error --fail \
        --request POST --header "Private-Token: $GITLAB_ACCESS_TOKEN" \
        --header "Content-Type: application/json" \
        --data "@json" \
        "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases"
      fi

.deploy-common: &deploy-common
  image: containers.ligo.org/emfollow/ssh-kerberos
  stage: deploy
  only:
    - branches@emfollow/gwcelery
    - tags@emfollow/gwcelery
  needs: []

# Continuous deployment.
# Note that all deployments except playground/CIT are manual.

.deploy-start: &deploy-start
  <<: *deploy-common
  script:
    # Update the repository.
    - |
      ssh -T $REMOTE_HOST bash <<EOF
      set -e
      if [ ! -d .git ]; then git init; fi
      git fetch --tags ${CI_REPOSITORY_URL} $CI_COMMIT_SHA
      git checkout -f $CI_COMMIT_SHA
      EOF
    # Reinstall and start (new session to reload bashrc).
    - |
      ssh -T $REMOTE_HOST bash <<EOF
      . .bashrc
      set -e
      python -m pip install --upgrade pip poetry poetry-dynamic-versioning
      poetry install
      # FIXME: remove pip uninstall temporary directories left behind due to
      # bug with pip on NFS. See https://github.com/pypa/pip/issues/6327
      chmod -R ug+rwx .local/lib/python3.7/site-packages/~* || true
      rm -rf .local/lib/python3.7/site-packages/~* || true
      gwcelery condor resubmit
      EOF

.deploy-stop: &deploy-stop
  <<: *deploy-common
  script: |
    ssh -T $REMOTE_HOST bash <<EOF
    . .bashrc
    set -e
    gwcelery condor rm
    EOF

deploy to production at CIT:
  <<: *deploy-start
  when: manual
  environment:
    name: production/CIT
    on_stop: stop deployment on production at CIT
    url: https://emfollow.ligo.caltech.edu/flower
  variables:
    REMOTE_HOST: emfollow@emfollow.ligo.caltech.edu

deploy to production at LHO:
  <<: *deploy-start
  when: manual
  environment:
    name: production/LHO
    on_stop: stop deployment on production at LHO
    url: https://emfollow.ligo-wa.caltech.edu/flower
  variables:
    REMOTE_HOST: emfollow@emfollow.ligo-wa.caltech.edu

deploy to playground at CIT:
  <<: *deploy-start
  environment:
    name: playground/CIT
    on_stop: stop deployment on playground at CIT
    url: https://emfollow-playground.ligo.caltech.edu/flower
  variables:
    REMOTE_HOST: emfollow-playground@emfollow-playground.ligo.caltech.edu

deploy to playground at LHO:
  <<: *deploy-start
  when: manual
  environment:
    name: playground/LHO
    on_stop: stop deployment on playground at LHO
    url: https://emfollow-playground.ligo-wa.caltech.edu/flower
  variables:
    REMOTE_HOST: emfollow-playground@emfollow-playground.ligo-wa.caltech.edu

deploy to test at CIT:
  <<: *deploy-start
  when: manual
  environment:
    name: test/CIT
    on_stop: stop deployment on test at CIT
    url: https://emfollow-test.ligo.caltech.edu/flower
  variables:
    REMOTE_HOST: emfollow-test@emfollow-test.ligo.caltech.edu

deploy to test at LHO:
  <<: *deploy-start
  when: manual
  environment:
    name: test/LHO
    on_stop: stop deployment on test at LHO
    url: https://emfollow-test.ligo-wa.caltech.edu/flower
  variables:
    REMOTE_HOST: emfollow-test@emfollow-test.ligo-wa.caltech.edu

stop deployment on production at CIT:
  <<: *deploy-stop
  when: manual
  environment:
    name: production/CIT
    action: stop

stop deployment on production at LHO:
  <<: *deploy-stop
  when: manual
  environment:
    name: production/LHO
    action: stop

stop deployment on playground at CIT:
  <<: *deploy-stop
  when: manual
  environment:
    name: playground/CIT
    action: stop

stop deployment on playground at LHO:
  <<: *deploy-stop
  when: manual
  environment:
    name: playground/LHO
    action: stop

stop deployment on test at CIT:
  <<: *deploy-stop
  when: manual
  environment:
    name: test/CIT
    action: stop

stop deployment on test at LHO:
  <<: *deploy-stop
  when: manual
  environment:
    name: test/LHO
    action: stop
